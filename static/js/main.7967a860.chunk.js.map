{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7967a860.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus}) => {\n  //Here I can write javascript code and function\n  const inputTextHandler = (e) => {\n    console.log(e.target.value);\n    setInputText(e.target.value);\n  };\n\n  const submitTodoHandler = (e) => {\n    e.preventDefault();\n    setTodos([\n      ...todos, {text: inputText, completed: false, id: Math.random() * 1000}\n    ]);\n    setInputText(\"\");\n  };\n\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  }\n  return(\n    <form>\n      <input \n        value={inputText} \n        onChange={inputTextHandler} \n        type=\"text\" \n        className=\"todo-input\" \n      />\n      <button onClick = {submitTodoHandler} className=\"todo-button\" type=\"submit\">\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n      <div className=\"select\">\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;","import React from 'react';\n\nconst Todo = ({text, todo, todos, setTodos}) => {\n  //Events\n  const deleteHandler = () => {\n    setTodos(todos.filter((el) => el.id !== todo.id));\n  };\n  const completeHandler = () => {\n    setTodos(todos.map(item => {\n      if(item.id ===  todo.id){\n        return {\n          ...item, completed: !item.completed\n        }\n      }\n        return item;\n    })\n    );\n  };\n  return(\n    <div className=\"todo\">\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\n      <button onClick={completeHandler} className=\"complete-btn\"><i className=\"fas fa-check\"></i></button>\n      <button onClick={deleteHandler} className=\"trash-btn\"><i className=\"fas fa-trash\"></i></button>\n    </div>\n  );\n};\n\nexport default Todo;","import React from 'react';\n//Import Components\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n  return(\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\">\n        {filteredTodos.map(todo => (\n          <Todo\n            setTodos={setTodos} \n            todos={todos}\n            key={todo.id}\n            todo={todo}\n            text={todo.text}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n\n\nexport default TodoList;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n//Importing Components\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  \n  \n  //State stuff\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  //RUN ONCE when the app start\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n  //USE EFFECT\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n  //Functions\n  const filterHandler = () => {\n    switch(status){\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true))\n        break;\n      case \"uncompleted\":\n      setFilteredTodos(todos.filter(todo => todo.completed === false))\n      break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n  //Save to local\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  };\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    }else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <header>\n      <h1>Lucas's Todo List</h1>\n      </header>\n      <Form\n        inputText={inputText} \n        todos={todos} \n        setTodos={setTodos} \n        setInputText={setInputText}\n        setStatus={setStatus}\n        \n      />\n      <TodoList filteredTodos={filteredTodos} setTodos={setTodos} todos={todos}/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}